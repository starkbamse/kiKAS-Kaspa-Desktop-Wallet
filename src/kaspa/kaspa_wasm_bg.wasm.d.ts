/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_address_free(a: number): void;
export function address_constructor(a: number, b: number): number;
export function address_toString(a: number, b: number): void;
export function address_version(a: number, b: number): void;
export function address_prefix(a: number, b: number): void;
export function address_set_prefix(a: number, b: number, c: number): void;
export function address_payload(a: number, b: number): void;
export function address_short(a: number, b: number, c: number): void;
export function __wbg_addresslist_free(a: number): void;
export function __wbg_mnemonic_free(a: number): void;
export function mnemonic_constructor(a: number, b: number, c: number, d: number): void;
export function mnemonic_entropy(a: number, b: number): void;
export function mnemonic_set_entropy(a: number, b: number, c: number): void;
export function mnemonic_random(a: number): void;
export function mnemonic_phrase(a: number, b: number): void;
export function mnemonic_set_phrase(a: number, b: number, c: number): void;
export function mnemonic_toSeed(a: number, b: number, c: number, d: number): void;
export function __wbg_xprv_free(a: number): void;
export function xprv_new(a: number, b: number, c: number): void;
export function xprv_deriveChild(a: number, b: number, c: number, d: number): void;
export function xprv_derivePath(a: number, b: number, c: number): void;
export function xprv_intoString(a: number, b: number, c: number, d: number): void;
export function xprv_publicKey(a: number, b: number): void;
export function __wbg_derivationpath_free(a: number): void;
export function derivationpath_new(a: number, b: number, c: number): void;
export function derivationpath_isEmpty(a: number): number;
export function derivationpath_length(a: number): number;
export function derivationpath_parent(a: number): number;
export function derivationpath_push(a: number, b: number, c: number, d: number): void;
export function derivationpath_toString(a: number, b: number): void;
export function __wbg_xpub_free(a: number): void;
export function xpub_new(a: number, b: number, c: number): void;
export function xpub_deriveChild(a: number, b: number, c: number, d: number): void;
export function xpub_derivePath(a: number, b: number, c: number): void;
export function xpub_intoString(a: number, b: number, c: number, d: number): void;
export function __wbg_header_free(a: number): void;
export function __wbg_get_header_version(a: number): number;
export function __wbg_set_header_version(a: number, b: number): void;
export function __wbg_get_header_timestamp(a: number): number;
export function __wbg_set_header_timestamp(a: number, b: number): void;
export function __wbg_get_header_bits(a: number): number;
export function __wbg_set_header_bits(a: number, b: number): void;
export function __wbg_get_header_nonce(a: number): number;
export function __wbg_set_header_nonce(a: number, b: number): void;
export function __wbg_get_header_daaScore(a: number): number;
export function __wbg_set_header_daaScore(a: number, b: number): void;
export function __wbg_get_header_blueScore(a: number): number;
export function __wbg_set_header_blueScore(a: number, b: number): void;
export function header_finalize(a: number, b: number): void;
export function header_constructor(a: number, b: number): void;
export function header_asJSON(a: number, b: number): void;
export function header_get_hash_as_hex(a: number, b: number): void;
export function header_get_hash_merkle_root_as_hex(a: number, b: number): void;
export function header_set_hash_merkle_root_from_js_value(a: number, b: number): void;
export function header_get_accepted_id_merkle_root_as_hex(a: number, b: number): void;
export function header_set_accepted_id_merkle_root_from_js_value(a: number, b: number): void;
export function header_get_utxo_commitment_as_hex(a: number, b: number): void;
export function header_set_utxo_commitment_from_js_value(a: number, b: number): void;
export function header_get_pruning_point_as_hex(a: number, b: number): void;
export function header_set_pruning_point_from_js_value(a: number, b: number): void;
export function header_get_parents_by_level_as_js_value(a: number): number;
export function header_set_parents_by_level_from_js_value(a: number, b: number): void;
export function header_blue_work(a: number): number;
export function header_getBlueWorkAsHex(a: number, b: number): void;
export function header_set_blue_work_from_js_value(a: number, b: number): void;
export function __wbg_scriptpublickey_free(a: number): void;
export function __wbg_get_scriptpublickey_version(a: number): number;
export function __wbg_set_scriptpublickey_version(a: number, b: number): void;
export function scriptpublickey_constructor(a: number, b: number, c: number): void;
export function scriptpublickey_script_as_hex(a: number, b: number): void;
export function __wbg_networkid_free(a: number): void;
export function __wbg_get_networkid_type(a: number): number;
export function __wbg_set_networkid_type(a: number, b: number): void;
export function __wbg_get_networkid_suffix(a: number, b: number): void;
export function __wbg_set_networkid_suffix(a: number, b: number, c: number): void;
export function networkid_ctor(a: number, b: number): void;
export function networkid_id(a: number, b: number): void;
export function networkid_addressPrefix(a: number, b: number): void;
export function networkid_toString(a: number, b: number): void;
export function __wbg_txutxoentry_free(a: number): void;
export function __wbg_get_txutxoentry_amount(a: number): number;
export function __wbg_set_txutxoentry_amount(a: number, b: number): void;
export function __wbg_get_txutxoentry_scriptPublicKey(a: number): number;
export function __wbg_set_txutxoentry_scriptPublicKey(a: number, b: number): void;
export function __wbg_get_txutxoentry_blockDaaScore(a: number): number;
export function __wbg_set_txutxoentry_blockDaaScore(a: number, b: number): void;
export function __wbg_get_txutxoentry_isCoinbase(a: number): number;
export function __wbg_set_txutxoentry_isCoinbase(a: number, b: number): void;
export function __wbg_transactioninput_free(a: number): void;
export function transactioninput_constructor(a: number, b: number): void;
export function transactioninput_get_previous_outpoint(a: number): number;
export function transactioninput_set_previous_outpoint(a: number, b: number): void;
export function transactioninput_get_signature_script_as_hex(a: number, b: number): void;
export function transactioninput_set_signature_script_from_js_value(a: number, b: number): void;
export function transactioninput_get_sequence(a: number): number;
export function transactioninput_set_sequence(a: number, b: number): void;
export function transactioninput_get_sig_op_count(a: number): number;
export function transactioninput_set_sig_op_count(a: number, b: number): void;
export function __wbg_signabletransaction_free(a: number): void;
export function __wbg_get_signabletransaction_entries(a: number): number;
export function __wbg_set_signabletransaction_entries(a: number, b: number): void;
export function signabletransaction_new_from_refs(a: number, b: number): number;
export function signabletransaction_tx_getter(a: number): number;
export function signabletransaction_toJSON(a: number, b: number): void;
export function signabletransaction_fromJSON(a: number, b: number, c: number): void;
export function signabletransaction_getScriptHashes(a: number, b: number): void;
export function signabletransaction_setSignatures(a: number, b: number, c: number): void;
export function signabletransaction_get_inputs(a: number, b: number): void;
export function signabletransaction_get_outputs(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_get_public_key(a: number): number;
export function keypair_get_private_key(a: number): number;
export function keypair_get_xonly_public_key(a: number): number;
export function keypair_toAddress(a: number, b: number, c: number): void;
export function keypair_toAddressECDSA(a: number, b: number, c: number): void;
export function keypair_random(a: number): void;
export function keypair_fromPrivateKey(a: number, b: number): void;
export function privatekey_try_new(a: number, b: number, c: number): void;
export function privatekey_toString(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_try_new(a: number, b: number, c: number): void;
export function publickey_toString(a: number, b: number): void;
export function publickey_toAddress(a: number, b: number, c: number): void;
export function publickey_toAddressECDSA(a: number, b: number, c: number): void;
export function privatekey_toKeypair(a: number, b: number): void;
export function __wbg_privatekey_free(a: number): void;
export function __wbg_scriptbuilder_free(a: number): void;
export function scriptbuilder_script(a: number, b: number): void;
export function scriptbuilder_drain(a: number, b: number): void;
export function scriptbuilder_addOp(a: number, b: number, c: number): void;
export function scriptbuilder_addOps(a: number, b: number, c: number): void;
export function scriptbuilder_addData(a: number, b: number, c: number): void;
export function scriptbuilder_addI64(a: number, b: number, c: number): void;
export function scriptbuilder_addLockTime(a: number, b: number, c: number): void;
export function scriptbuilder_addSequence(a: number, b: number, c: number): void;
export function signTransaction(a: number, b: number, c: number, d: number): void;
export function signScriptHash(a: number, b: number, c: number): void;
export function __wbg_transactionoutputinner_free(a: number): void;
export function __wbg_get_transactionoutputinner_value(a: number): number;
export function __wbg_set_transactionoutputinner_value(a: number, b: number): void;
export function __wbg_get_transactionoutputinner_scriptPublicKey(a: number): number;
export function __wbg_set_transactionoutputinner_scriptPublicKey(a: number, b: number): void;
export function __wbg_transactionoutput_free(a: number): void;
export function transactionoutput_new(a: number, b: number): number;
export function transactionoutput_value(a: number): number;
export function transactionoutput_set_value(a: number, b: number): void;
export function transactionoutput_scriptPublicKey(a: number): number;
export function transactionoutput_set_scriptPublicKey(a: number, b: number): void;
export function __wbg_transactionoutpoint_free(a: number): void;
export function transactionoutpoint_new(a: number, b: number): number;
export function transactionoutpoint_getId(a: number, b: number): void;
export function transactionoutpoint_transactionId(a: number, b: number): void;
export function transactionoutpoint_index(a: number): number;
export function __wbg_utxoentry_free(a: number): void;
export function __wbg_get_utxoentry_address(a: number): number;
export function __wbg_set_utxoentry_address(a: number, b: number): void;
export function __wbg_get_utxoentry_outpoint(a: number): number;
export function __wbg_set_utxoentry_outpoint(a: number, b: number): void;
export function __wbg_get_utxoentry_entry(a: number): number;
export function __wbg_set_utxoentry_entry(a: number, b: number): void;
export function __wbg_utxoentryreference_free(a: number): void;
export function utxoentryreference_entry(a: number): number;
export function utxoentryreference_getTransactionId(a: number, b: number): void;
export function utxoentryreference_getId(a: number, b: number): void;
export function utxoentryreference_amount(a: number): number;
export function utxoentryreference_isCoinbase(a: number): number;
export function utxoentryreference_blockDaaScore(a: number): number;
export function __wbg_utxoentries_free(a: number): void;
export function utxoentries_js_ctor(a: number, b: number): void;
export function utxoentries_get_items_as_js_array(a: number): number;
export function utxoentries_set_items_from_js_array(a: number, b: number): void;
export function utxoentries_sort(a: number): void;
export function utxoentries_amount(a: number): number;
export function __wbg_transaction_free(a: number): void;
export function transaction_is_coinbase(a: number): number;
export function transaction_finalize(a: number, b: number): void;
export function transaction_id(a: number, b: number): void;
export function transaction_constructor(a: number, b: number): void;
export function transaction_get_inputs_as_js_array(a: number): number;
export function transaction_set_inputs_from_js_array(a: number, b: number): void;
export function transaction_get_outputs_as_js_array(a: number): number;
export function transaction_set_outputs_from_js_array(a: number, b: number): void;
export function transaction_version(a: number): number;
export function transaction_set_version(a: number, b: number): void;
export function transaction_gas(a: number): number;
export function transaction_set_gas(a: number, b: number): void;
export function transaction_get_subnetwork_id_as_hex(a: number, b: number): void;
export function transaction_set_subnetwork_id_from_js_value(a: number, b: number): void;
export function transaction_get_payload_as_hex_string(a: number, b: number): void;
export function transaction_set_payload_from_js_value(a: number, b: number): void;
export function transaction_lock_time(a: number): number;
export function transaction_set_lock_time(a: number, b: number): void;
export function __wbg_hash_free(a: number): void;
export function hash_constructor(a: number, b: number): number;
export function hash_toString(a: number, b: number): void;
export function __wbg_state_free(a: number): void;
export function state_new(a: number): number;
export function state_target(a: number, b: number): void;
export function state_checkPow(a: number, b: number, c: number): void;
export function state_get_pre_pow_hash(a: number, b: number): void;
export function __wbg_pubkeyderivationmanager_free(a: number): void;
export function pubkeyderivationmanager_publicKey(a: number, b: number): void;
export function __wbg_balance_free(a: number): void;
export function balance_mature(a: number): number;
export function balance_pending(a: number): number;
export function balance_as_strings(a: number, b: number, c: number): void;
export function __wbg_balancestrings_free(a: number): void;
export function balancestrings_mature(a: number): number;
export function balancestrings_pending(a: number): number;
export function generatorsummary_networkType(a: number): number;
export function generatorsummary_utxos(a: number): number;
export function generatorsummary_fees(a: number): number;
export function generatorsummary_transactions(a: number): number;
export function generatorsummary_finalAmount(a: number): number;
export function generatorsummary_finalTransactionId(a: number, b: number): void;
export function __wbg_masscalculator_free(a: number): void;
export function masscalculator_new(a: number): number;
export function masscalculator_isStandardOutputAmountDust(a: number): number;
export function masscalculator_isTransactionOutputDust(a: number, b: number): void;
export function masscalculator_calcMassForTransaction(a: number, b: number, c: number): void;
export function masscalculator_blankTransactionMass(a: number): number;
export function masscalculator_calcMassForPayload(a: number, b: number): number;
export function masscalculator_calcMassForOutputs(a: number, b: number, c: number): void;
export function masscalculator_calcMassForInputs(a: number, b: number, c: number): void;
export function masscalculator_calcMassForOutput(a: number, b: number, c: number): void;
export function masscalculator_calcMassForInput(a: number, b: number, c: number): void;
export function masscalculator_calcSignatureMass(a: number, b: number): number;
export function masscalculator_calcSignatureMassForInputs(a: number, b: number, c: number): number;
export function masscalculator_calcMinimumTransactionRelayFeeFromMass(a: number, b: number): number;
export function masscalculator_calcMiniumTxRelayFee(a: number, b: number, c: number, d: number): void;
export function __wbg_account_free(a: number): void;
export function __wbg_get_account_context(a: number): number;
export function __wbg_set_account_context(a: number, b: number): void;
export function account_ctor(a: number, b: number): void;
export function account_balance(a: number): number;
export function account_type(a: number, b: number): void;
export function account_balanceStrings(a: number, b: number, c: number): void;
export function account_receiveAddress(a: number, b: number): void;
export function account_changeAddress(a: number, b: number): void;
export function account_deriveReceiveAddress(a: number): number;
export function account_deriveChangeAddress(a: number): number;
export function account_scan(a: number): number;
export function account_send(a: number, b: number): number;
export function masscalculator_minimumRequiredTransactionRelayFee(a: number): number;
export function masscalculator_minimumRelayTransactionFee(): number;
export function masscalculator_maximumStandardTransactionMass(): number;
export function masscalculator_blankTransactionSerializedByteSize(): number;
export function __wbg_generatorsummary_free(a: number): void;
export function __wbg_generator_free(a: number): void;
export function generator_ctor(a: number, b: number): void;
export function generator_next(a: number): number;
export function generator_estimate(a: number): number;
export function generator_summary(a: number): number;
export function configureUtxoProcessing(a: number, b: number): void;
export function sompiToKaspa(a: number, b: number): void;
export function sompiToKaspaString(a: number, b: number): void;
export function sompiToKaspaStringWithSuffix(a: number, b: number, c: number): void;
export function __wbg_utxoprocessor_free(a: number): void;
export function __wbg_get_utxoprocessor_rpc(a: number): number;
export function __wbg_set_utxoprocessor_rpc(a: number, b: number): void;
export function __wbg_get_utxoprocessor_events(a: number): number;
export function __wbg_set_utxoprocessor_events(a: number, b: number): void;
export function utxoprocessor_ctor(a: number): number;
export function utxoprocessor_shutdown(a: number): number;
export function __wbg_xprivatekey_free(a: number): void;
export function xprivatekey_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function xprivatekey_receiveKey(a: number, b: number, c: number): void;
export function xprivatekey_changeKey(a: number, b: number, c: number): void;
export function kaspaToSompi(a: number): number;
export function __wbg_storage_free(a: number): void;
export function storage_filename(a: number, b: number): void;
export function __wbg_paymentoutput_free(a: number): void;
export function __wbg_get_paymentoutput_address(a: number): number;
export function __wbg_set_paymentoutput_address(a: number, b: number): void;
export function __wbg_get_paymentoutput_amount(a: number): number;
export function __wbg_set_paymentoutput_amount(a: number, b: number): void;
export function paymentoutput_new(a: number, b: number): number;
export function __wbg_paymentoutputs_free(a: number): void;
export function paymentoutputs_constructor(a: number, b: number): void;
export function __wbg_consensusparams_free(a: number): void;
export function getConsensusParametersByAddress(a: number): number;
export function getConsensusParametersByNetwork(a: number): number;
export function __wbg_pendingtransaction_free(a: number): void;
export function pendingtransaction_id(a: number, b: number): void;
export function pendingtransaction_paymentAmount(a: number): number;
export function pendingtransaction_changeAmount(a: number): number;
export function pendingtransaction_feeAmount(a: number): number;
export function pendingtransaction_aggregateInputAmount(a: number): number;
export function pendingtransaction_aggregateOutputAmount(a: number): number;
export function pendingtransaction_type(a: number, b: number): void;
export function pendingtransaction_addresses(a: number): number;
export function pendingtransaction_getUtxoEntries(a: number): number;
export function pendingtransaction_sign(a: number, b: number, c: number): void;
export function pendingtransaction_submit(a: number, b: number): number;
export function pendingtransaction_transaction(a: number, b: number): void;
export function __wbg_utxocontext_free(a: number): void;
export function utxocontext_ctor(a: number): number;
export function utxocontext_trackAddresses(a: number, b: number, c: number): number;
export function utxocontext_unregisterAddresses(a: number, b: number): number;
export function utxocontext_clear(a: number): number;
export function utxocontext_mature(a: number, b: number): void;
export function utxocontext_pending(a: number, b: number): void;
export function utxocontext_balance(a: number): number;
export function utxocontext_updateBalance(a: number): number;
export function __wbg_wallet_free(a: number): void;
export function __wbg_get_wallet_rpc(a: number): number;
export function __wbg_set_wallet_rpc(a: number, b: number): void;
export function __wbg_get_wallet_events(a: number): number;
export function __wbg_set_wallet_events(a: number, b: number): void;
export function wallet_constructor(a: number, b: number): void;
export function wallet_keys(a: number): number;
export function wallet_accounts(a: number): number;
export function wallet_accountIterator(a: number, b: number): number;
export function wallet_isOpen(a: number): number;
export function wallet_isSynced(a: number): number;
export function wallet_descriptor(a: number, b: number): void;
export function wallet_exists(a: number, b: number): number;
export function wallet_createWallet(a: number, b: number): number;
export function wallet_createPrvKeyData(a: number, b: number): number;
export function wallet_createAccount(a: number, b: number, c: number, d: number): number;
export function wallet_ping(a: number): number;
export function wallet_start(a: number): number;
export function wallet_stop(a: number): number;
export function wallet_connect(a: number, b: number): number;
export function wallet_disconnect(a: number): number;
export function createAddress(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function createMultisigAddress(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function createTransaction(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function createTransactions(a: number): number;
export function estimateTransactions(a: number): number;
export function __wbg_prvkeydatainfo_free(a: number): void;
export function prvkeydatainfo_id(a: number, b: number): void;
export function prvkeydatainfo_name(a: number): number;
export function prvkeydatainfo_isEncrypted(a: number): number;
export function prvkeydatainfo_setName(a: number, b: number, c: number, d: number): void;
export function sha256(a: number, b: number): void;
export function sha256d(a: number, b: number): void;
export function argon2sha256iv(a: number, b: number, c: number): void;
export function encryptXChaCha20Poly1305(a: number, b: number, c: number, d: number, e: number): void;
export function decryptXChaCha20Poly1305(a: number, b: number, c: number, d: number, e: number): void;
export function signMessage(a: number, b: number): void;
export function verifyMessage(a: number, b: number): void;
export function __wbg_xpublickey_free(a: number): void;
export function xpublickey_fromXPub(a: number, b: number, c: number, d: number): number;
export function xpublickey_fromMasterXPrv(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function xpublickey_receivePubkeys(a: number, b: number, c: number): number;
export function xpublickey_changePubkeys(a: number, b: number, c: number): number;
export function __wbg_pubkeyderivationmanagerv0_free(a: number): void;
export function pubkeyderivationmanagerv0_publicKey(a: number, b: number): void;
export function calculateDifficulty(a: number, b: number): void;
export function __wbg_rpcclient_free(a: number): void;
export function rpcclient_new(a: number, b: number, c: number, d: number, e: number): void;
export function rpcclient_url(a: number, b: number): void;
export function rpcclient_open(a: number): number;
export function rpcclient_connect(a: number, b: number): number;
export function rpcclient_disconnect(a: number): number;
export function rpcclient_notify(a: number, b: number): number;
export function rpcclient_defaultPort(a: number, b: number, c: number): void;
export function rpcclient_parseUrl(a: number, b: number, c: number, d: number, e: number): void;
export function rpcclient_subscribeDaaScore(a: number): number;
export function rpcclient_unsubscribeDaaScore(a: number): number;
export function rpcclient_subscribeUtxosChanged(a: number, b: number): number;
export function rpcclient_unsubscribeUtxosChanged(a: number, b: number): number;
export function rpcclient_subscribeVirtualChainChanged(a: number, b: number): number;
export function rpcclient_unsubscribeVirtualChainChanged(a: number, b: number): number;
export function rpcclient_subscribeBlockAdded(a: number): number;
export function rpcclient_unsubscribeBlockAdded(a: number): number;
export function rpcclient_subscribeFinalityConflict(a: number): number;
export function rpcclient_unsubscribeFinalityConflict(a: number): number;
export function rpcclient_subscribeFinalityConflictResolved(a: number): number;
export function rpcclient_unsubscribeFinalityConflictResolved(a: number): number;
export function rpcclient_subscribeSinkBlueScoreChanged(a: number): number;
export function rpcclient_unsubscribeSinkBlueScoreChanged(a: number): number;
export function rpcclient_subscribeVirtualDaaScoreChanged(a: number): number;
export function rpcclient_unsubscribeVirtualDaaScoreChanged(a: number): number;
export function rpcclient_subscribePruningPointUtxoSetOverride(a: number): number;
export function rpcclient_unsubscribePruningPointUtxoSetOverride(a: number): number;
export function rpcclient_subscribeNewBlockTemplate(a: number): number;
export function rpcclient_unsubscribeNewBlockTemplate(a: number): number;
export function rpcclient_getBlockCount(a: number): number;
export function rpcclient_getBlockDagInfo(a: number): number;
export function rpcclient_getCoinSupply(a: number): number;
export function rpcclient_getConnectedPeerInfo(a: number): number;
export function rpcclient_getInfo(a: number): number;
export function rpcclient_getPeerAddresses(a: number): number;
export function rpcclient_getMetrics(a: number): number;
export function rpcclient_getSink(a: number): number;
export function rpcclient_getSinkBlueScore(a: number): number;
export function rpcclient_ping(a: number): number;
export function rpcclient_shutdown(a: number): number;
export function rpcclient_getServerInfo(a: number): number;
export function rpcclient_getSyncStatus(a: number): number;
export function rpcclient_addPeer(a: number, b: number): number;
export function rpcclient_ban(a: number, b: number): number;
export function rpcclient_estimateNetworkHashesPerSecond(a: number, b: number): number;
export function rpcclient_getBalanceByAddress(a: number, b: number): number;
export function rpcclient_getBalancesByAddresses(a: number, b: number): number;
export function rpcclient_getBlock(a: number, b: number): number;
export function rpcclient_getBlocks(a: number, b: number): number;
export function rpcclient_getBlockTemplate(a: number, b: number): number;
export function rpcclient_getCurrentNetwork(a: number, b: number): number;
export function rpcclient_getHeaders(a: number, b: number): number;
export function rpcclient_getMempoolEntries(a: number, b: number): number;
export function rpcclient_getMempoolEntriesByAddresses(a: number, b: number): number;
export function rpcclient_getMempoolEntry(a: number, b: number): number;
export function rpcclient_getSubnetwork(a: number, b: number): number;
export function rpcclient_getVirtualChainFromBlock(a: number, b: number): number;
export function rpcclient_resolveFinalityConflict(a: number, b: number): number;
export function rpcclient_submitBlock(a: number, b: number): number;
export function rpcclient_unban(a: number, b: number): number;
export function rpcclient_submitTransaction(a: number, b: number, c: number): number;
export function rpcclient_getUtxosByAddresses(a: number, b: number): number;
export function rpcclient_getUtxosByAddressesCall(a: number, b: number): number;
export function __wbg_consoleconstructoroptions_free(a: number): void;
export function consoleconstructoroptions_new_with_values(a: number, b: number, c: number, d: number, e: number): number;
export function consoleconstructoroptions_new(a: number, b: number): number;
export function consoleconstructoroptions_stdout(a: number): number;
export function consoleconstructoroptions_set_stdout(a: number, b: number): void;
export function consoleconstructoroptions_stderr(a: number): number;
export function consoleconstructoroptions_set_stderr(a: number, b: number): void;
export function consoleconstructoroptions_ignore_errors(a: number): number;
export function consoleconstructoroptions_set_ignore_errors(a: number, b: number): void;
export function consoleconstructoroptions_color_mod(a: number): number;
export function consoleconstructoroptions_set_color_mod(a: number, b: number): void;
export function consoleconstructoroptions_inspect_options(a: number): number;
export function consoleconstructoroptions_set_inspect_options(a: number, b: number): void;
export function writestream_add_listener_with_open(a: number, b: number): number;
export function writestream_add_listener_with_close(a: number, b: number): number;
export function writestream_on_with_open(a: number, b: number): number;
export function writestream_on_with_close(a: number, b: number): number;
export function writestream_once_with_open(a: number, b: number): number;
export function writestream_once_with_close(a: number, b: number): number;
export function writestream_prepend_listener_with_open(a: number, b: number): number;
export function writestream_prepend_listener_with_close(a: number, b: number): number;
export function writestream_prepend_once_listener_with_open(a: number, b: number): number;
export function writestream_prepend_once_listener_with_close(a: number, b: number): number;
export function __wbg_getnameoptions_free(a: number): void;
export function getnameoptions_new(a: number, b: number, c: number, d: number): number;
export function getnameoptions_family(a: number): number;
export function getnameoptions_set_family(a: number, b: number): void;
export function getnameoptions_host(a: number): number;
export function getnameoptions_set_host(a: number, b: number): void;
export function getnameoptions_local_address(a: number): number;
export function getnameoptions_set_local_address(a: number, b: number): void;
export function getnameoptions_port(a: number): number;
export function getnameoptions_set_port(a: number, b: number): void;
export function readstream_add_listener_with_open(a: number, b: number): number;
export function readstream_add_listener_with_close(a: number, b: number): number;
export function readstream_on_with_open(a: number, b: number): number;
export function readstream_on_with_close(a: number, b: number): number;
export function readstream_once_with_open(a: number, b: number): number;
export function readstream_once_with_close(a: number, b: number): number;
export function readstream_prepend_listener_with_open(a: number, b: number): number;
export function readstream_prepend_listener_with_close(a: number, b: number): number;
export function readstream_prepend_once_listener_with_open(a: number, b: number): number;
export function readstream_prepend_once_listener_with_close(a: number, b: number): number;
export function __wbg_assertionerroroptions_free(a: number): void;
export function assertionerroroptions_new(a: number, b: number, c: number, d: number): number;
export function assertionerroroptions_message(a: number): number;
export function assertionerroroptions_set_message(a: number, b: number): void;
export function assertionerroroptions_actual(a: number): number;
export function assertionerroroptions_set_actual(a: number, b: number): void;
export function assertionerroroptions_expected(a: number): number;
export function assertionerroroptions_set_expected(a: number, b: number): void;
export function assertionerroroptions_operator(a: number): number;
export function assertionerroroptions_set_operator(a: number, b: number): void;
export function __wbg_wasioptions_free(a: number): void;
export function wasioptions_new_with_values(a: number, b: number, c: number, d: number): number;
export function wasioptions_new(a: number): number;
export function wasioptions_args(a: number, b: number): void;
export function wasioptions_set_args(a: number, b: number, c: number): void;
export function wasioptions_set_env(a: number, b: number): void;
export function wasioptions_env(a: number): number;
export function wasioptions_set_preopens(a: number, b: number): void;
export function wasioptions_preopens(a: number): number;
export function __wbg_agentconstructoroptions_free(a: number): void;
export function agentconstructoroptions_keep_alive_msecs(a: number): number;
export function agentconstructoroptions_set_keep_alive_msecs(a: number, b: number): void;
export function agentconstructoroptions_keep_alive(a: number): number;
export function agentconstructoroptions_set_keep_alive(a: number, b: number): void;
export function agentconstructoroptions_max_free_sockets(a: number): number;
export function agentconstructoroptions_set_max_free_sockets(a: number, b: number): void;
export function agentconstructoroptions_max_sockets(a: number): number;
export function agentconstructoroptions_set_max_sockets(a: number, b: number): void;
export function agentconstructoroptions_timeout(a: number): number;
export function agentconstructoroptions_set_timeout(a: number, b: number): void;
export function __wbg_appendfileoptions_free(a: number): void;
export function appendfileoptions_new_with_values(a: number, b: number, c: number, d: number): number;
export function appendfileoptions_new(): number;
export function appendfileoptions_encoding(a: number): number;
export function appendfileoptions_set_encoding(a: number, b: number): void;
export function appendfileoptions_mode(a: number, b: number): void;
export function appendfileoptions_set_mode(a: number, b: number, c: number): void;
export function appendfileoptions_flag(a: number): number;
export function appendfileoptions_set_flag(a: number, b: number): void;
export function __wbg_createreadstreamoptions_free(a: number): void;
export function createreadstreamoptions_new_with_values(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): number;
export function createreadstreamoptions_auto_close(a: number): number;
export function createreadstreamoptions_set_auto_close(a: number, b: number): void;
export function createreadstreamoptions_emit_close(a: number): number;
export function createreadstreamoptions_set_emit_close(a: number, b: number): void;
export function createreadstreamoptions_encoding(a: number): number;
export function createreadstreamoptions_set_encoding(a: number, b: number): void;
export function createreadstreamoptions_end(a: number, b: number): void;
export function createreadstreamoptions_set_end(a: number, b: number, c: number): void;
export function createreadstreamoptions_fd(a: number, b: number): void;
export function createreadstreamoptions_set_fd(a: number, b: number, c: number): void;
export function createreadstreamoptions_flags(a: number): number;
export function createreadstreamoptions_set_flags(a: number, b: number): void;
export function createreadstreamoptions_high_water_mark(a: number, b: number): void;
export function createreadstreamoptions_set_high_water_mark(a: number, b: number, c: number): void;
export function createreadstreamoptions_mode(a: number, b: number): void;
export function createreadstreamoptions_set_mode(a: number, b: number, c: number): void;
export function createreadstreamoptions_start(a: number, b: number): void;
export function createreadstreamoptions_set_start(a: number, b: number, c: number): void;
export function __wbg_writefilesyncoptions_free(a: number): void;
export function writefilesyncoptions_new(a: number, b: number, c: number, d: number): number;
export function writefilesyncoptions_flag(a: number): number;
export function writefilesyncoptions_set_flag(a: number, b: number): void;
export function writefilesyncoptions_mode(a: number, b: number): void;
export function writefilesyncoptions_set_mode(a: number, b: number, c: number): void;
export function writefilesyncoptions_encoding(a: number): number;
export function writefilesyncoptions_set_encoding(a: number, b: number): void;
export function __wbg_setaadoptions_free(a: number): void;
export function setaadoptions_new(a: number, b: number, c: number): number;
export function setaadoptions_flush(a: number): number;
export function setaadoptions_set_flush(a: number, b: number): void;
export function setaadoptions_plaintextLength(a: number): number;
export function setaadoptions_set_plaintext_length(a: number, b: number): void;
export function setaadoptions_transform(a: number): number;
export function setaadoptions_set_transform(a: number, b: number): void;
export function __wbg_streamtransformoptions_free(a: number): void;
export function streamtransformoptions_flush(a: number): number;
export function streamtransformoptions_set_flush(a: number, b: number): void;
export function streamtransformoptions_transform(a: number): number;
export function streamtransformoptions_set_transform(a: number, b: number): void;
export function streamtransformoptions_new(a: number, b: number): number;
export function __wbg_mkdtempsyncoptions_free(a: number): void;
export function mkdtempsyncoptions_new_with_values(a: number): number;
export function mkdtempsyncoptions_new(): number;
export function mkdtempsyncoptions_encoding(a: number): number;
export function mkdtempsyncoptions_set_encoding(a: number, b: number): void;
export function userinfooptions_encoding(a: number): number;
export function userinfooptions_set_encoding(a: number, b: number): void;
export function userinfooptions_new_with_values(a: number): number;
export function __wbg_userinfooptions_free(a: number): void;
export function userinfooptions_new(): number;
export function __wbg_createwritestreamoptions_free(a: number): void;
export function createwritestreamoptions_new_with_values(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function createwritestreamoptions_auto_close(a: number): number;
export function createwritestreamoptions_set_auto_close(a: number, b: number): void;
export function createwritestreamoptions_emit_close(a: number): number;
export function createwritestreamoptions_set_emit_close(a: number, b: number): void;
export function createwritestreamoptions_encoding(a: number): number;
export function createwritestreamoptions_set_encoding(a: number, b: number): void;
export function createwritestreamoptions_fd(a: number, b: number): void;
export function createwritestreamoptions_set_fd(a: number, b: number, c: number): void;
export function createwritestreamoptions_flags(a: number): number;
export function createwritestreamoptions_set_flags(a: number, b: number): void;
export function createwritestreamoptions_mode(a: number, b: number): void;
export function createwritestreamoptions_set_mode(a: number, b: number, c: number): void;
export function createwritestreamoptions_start(a: number, b: number): void;
export function createwritestreamoptions_set_start(a: number, b: number, c: number): void;
export function __wbg_netserveroptions_free(a: number): void;
export function netserveroptions_allow_half_open(a: number): number;
export function netserveroptions_set_allow_half_open(a: number, b: number): void;
export function netserveroptions_pause_on_connect(a: number): number;
export function netserveroptions_set_pause_on_connect(a: number, b: number): void;
export function __wbg_formatinputpathobject_free(a: number): void;
export function formatinputpathobject_new_with_values(a: number, b: number, c: number, d: number, e: number): number;
export function formatinputpathobject_new(): number;
export function formatinputpathobject_base(a: number): number;
export function formatinputpathobject_set_base(a: number, b: number): void;
export function formatinputpathobject_dir(a: number): number;
export function formatinputpathobject_set_dir(a: number, b: number): void;
export function formatinputpathobject_ext(a: number): number;
export function formatinputpathobject_set_ext(a: number, b: number): void;
export function formatinputpathobject_name(a: number): number;
export function formatinputpathobject_set_name(a: number, b: number): void;
export function formatinputpathobject_root(a: number): number;
export function formatinputpathobject_set_root(a: number, b: number): void;
export function __wbg_pipeoptions_free(a: number): void;
export function pipeoptions_new(a: number): number;
export function pipeoptions_end(a: number): number;
export function pipeoptions_set_end(a: number, b: number): void;
export function processsendoptions_swallow_errors(a: number): number;
export function processsendoptions_set_swallow_errors(a: number, b: number): void;
export function processsendoptions_new(a: number): number;
export function __wbg_processsendoptions_free(a: number): void;
export function __wbg_createhookcallbacks_free(a: number): void;
export function createhookcallbacks_new(a: number, b: number, c: number, d: number, e: number): number;
export function createhookcallbacks_init(a: number): number;
export function createhookcallbacks_set_init(a: number, b: number): void;
export function createhookcallbacks_before(a: number): number;
export function createhookcallbacks_set_before(a: number, b: number): void;
export function createhookcallbacks_after(a: number): number;
export function createhookcallbacks_set_after(a: number, b: number): void;
export function createhookcallbacks_destroy(a: number): number;
export function createhookcallbacks_set_destroy(a: number, b: number): void;
export function createhookcallbacks_promise_resolve(a: number): number;
export function createhookcallbacks_set_promise_resolve(a: number, b: number): void;
export function rustsecp256k1_v0_6_1_context_create(a: number): number;
export function rustsecp256k1_v0_6_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_6_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_6_1_default_error_callback_fn(a: number, b: number): void;
export function __wbg_abortable_free(a: number): void;
export function abortable_new(): number;
export function abortable_isAborted(a: number): number;
export function abortable_abort(a: number): void;
export function abortable_check(a: number, b: number): void;
export function __wbg_aborted_free(a: number): void;
export function test(): number;
export function asyncstreamproxy_next(a: number): number;
export function __wbg_asyncstreamproxy_free(a: number): void;
export function initBrowserPanicHook(): void;
export function initConsolePanicHook(): void;
export function presentPanicHookLogs(): void;
export function defer(): number;
export function __wbg_eventdispatcher_free(a: number): void;
export function eventdispatcher_new(): number;
export function eventdispatcher_listener(a: number): number;
export function eventdispatcher_set_listener(a: number, b: number, c: number): void;
export function eventdispatcher_registerListener(a: number, b: number, c: number): void;
export function eventdispatcher_removeListener(a: number, b: number): void;
export function eventdispatcher_stop(a: number): number;
export function __wbindgen_export_0(a: number, b: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_export_4(a: number, b: number): void;
export function __wbindgen_export_5(a: number, b: number, c: number): void;
export function __wbindgen_export_6(a: number, b: number, c: number): void;
export function __wbindgen_export_7(a: number, b: number): void;
export function __wbindgen_export_8(a: number): void;
export function __wbindgen_export_9(a: number, b: number, c: number): void;
export function __wbindgen_export_10(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
